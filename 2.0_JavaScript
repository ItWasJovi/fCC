# Basic JS

## Objects

Declaration of object is like variables, but with brackets;
```
var myObj = {
  "prop 1" = "value 1";
  prop2 = 2;
}
```

Access to object properties can be done via `.` notation and also `[]` bracket notation. New properties can be added the same way.

- Bracket notation can be used to access the *value* of object variables by matching them to another variable.

### Deleting Properties

As simple as `delete myObj.myProp`

### Checking Properties

You can check if an Object has a particular named property using:

`myObj.hasOwnProperty(prop);`

# ES6

ECMAScript is a standardized version of JavaScript with the goal of unifying the language's specifications and features. As all major browsers and JavaScript-runtimes follow this specification, the term ECMAScript is interchangeable with the term JavaScript.

# Declaring Variables

- `let` does the same thing as `var` except when using `let`, a variable with the same name **can only be declared once**.

- `let` variables are limited to a block, statement, or expression if declared in such ways. *E.g. If `let` is used in a for loop, it only exists within the loop whereas `var` would be global`*.

- `"use strict";` enables Strict Mode, which catches common coding mistakes and "unsafe" actions.

- `const` is like `let` but they are **read-only**. Some devs will assign all variables as `const` unless they know they need to change it.

- `const` **OBJECTS** (e.g. arrays, functions) are still mutable.

```
"use strict";
const s = [5, 6, 7];
s = [1, 2, 3]; // throws error, trying to assign a const
s[2] = 45; // works just as it would with an array declared with var or let
console.log(s); // returns [5, 6, 45]
```

# Freezing Objects
